{"remainingRequest":"/Users/luozien/Desktop/vue全栈架构师/01/vue-study-web18/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/luozien/Desktop/vue全栈架构师/01/vue-study-web18/src/components/form/KFormItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/luozien/Desktop/vue全栈架构师/01/vue-study-web18/src/components/form/KFormItem.vue","mtime":1596770477787},{"path":"/Users/luozien/Desktop/vue全栈架构师/01/vue-study-web18/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/luozien/Desktop/vue全栈架构师/01/vue-study-web18/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/luozien/Desktop/vue全栈架构师/01/vue-study-web18/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/luozien/Desktop/vue全栈架构师/01/vue-study-web18/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBTY2hlbWEgZnJvbSAiYXN5bmMtdmFsaWRhdG9yIjsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiS0Zvcm1JdGVtIiwKICBjb21wb25lbnROYW1lOiAiS0Zvcm1JdGVtIiwKICBpbmplY3Q6IFsiZm9ybSJdLAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBlcnJvcjogIiIKICAgIH07CiAgfSwKICBwcm9wczogewogICAgbGFiZWw6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAiIgogICAgfSwKICAgIHByb3A6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAiIgogICAgfQogIH0sCiAgbW91bnRlZCgpIHsKICAgIC8vIOebkeWQrOagoemqjOS6i+S7tgogICAgdGhpcy4kb24oInZhbGlkYXRlIiwgKHZhbHVlKSA9PiB7CiAgICAgIGNvbnNvbGUubG9nKHZhbHVlKTsKICAgICAgdGhpcy52YWxpZGF0ZSgpOwogICAgfSk7CiAgIAogIH0sCiAgbWV0aG9kczogewogICAgLy/mjqXlj5flrZDnu4Tku7ZpbnB1dOahhui+k+WFpeaXtumAmui/hyRwYXJlbnTmtL7lj5HnmoR2YWxpZGF0ZeagoemqjAogICAgLy/ljbPml7bov5Tlm57moKHpqozkv6Hmga8KCiAgICB2YWxpZGF0ZSgpIHsKICAgICAgLy8g5omn6KGM5qCh6aqMCiAgICAgIC8vIDEu6I635Y+W5YC85ZKM5qCh6aqM6KeE5YiZCiAgICAgIGNvbnN0IHJ1bGVzID0gdGhpcy5mb3JtLnJ1bGVzW3RoaXMucHJvcF07CiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5mb3JtLm1vZGVsW3RoaXMucHJvcF07CgogICAgICAvLyAyLuaJp+ihjOagoemqjO+8muS9v+eUqOWumOaWueS5n+S9v+eUqOeahGFzeW5jLXZhbGlkYXRvcgogICAgICAvLyDliJvlu7rmj4/ov7Dlr7nosaEKICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHsgW3RoaXMucHJvcF06IHJ1bGVzIH07CiAgICAgIC8vIOWIm+W7uuagoemqjOWZqAogICAgICBjb25zdCB2YWxpZGF0b3IgPSBuZXcgU2NoZW1hKGRlc2NyaXB0b3IpOwogICAgICAvLyDmiafooYzmoKHpqowKICAgICAgcmV0dXJuIHZhbGlkYXRvci52YWxpZGF0ZSh7IFt0aGlzLnByb3BdOiB2YWx1ZSB9LCBlcnJvcnMgPT4gewogICAgICAgIC8vIOWmguaenGVycm9yc+WtmOWcqO+8jOWImeivtOaYjuagoemqjOWksei0pQogICAgICAgIGlmIChlcnJvcnMpIHsKICAgICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcnNbMF0ubWVzc2FnZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5lcnJvciA9ICIiOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfQp9Owo="},{"version":3,"sources":["KFormItem.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"KFormItem.vue","sourceRoot":"src/components/form","sourcesContent":["<template>\n  <div>\n    <!-- label标签 -->\n    <label v-if=\"label\">{{label}}</label>\n    <!-- 容器，放插槽 -->\n    <slot></slot>\n    <!-- 错误信息展示 -->\n    <p v-if=\"error\" class=\"error\">{{error}}</p>\n  </div>\n</template>\n\n<script>\nimport Schema from \"async-validator\";\n\nexport default {\n  name: \"KFormItem\",\n  componentName: \"KFormItem\",\n  inject: [\"form\"],\n  data() {\n    return {\n      error: \"\"\n    };\n  },\n  props: {\n    label: {\n      type: String,\n      default: \"\"\n    },\n    prop: {\n      type: String,\n      default: \"\"\n    }\n  },\n  mounted() {\n    // 监听校验事件\n    this.$on(\"validate\", (value) => {\n      console.log(value);\n      this.validate();\n    });\n   \n  },\n  methods: {\n    //接受子组件input框输入时通过$parent派发的validate校验\n    //即时返回校验信息\n\n    validate() {\n      // 执行校验\n      // 1.获取值和校验规则\n      const rules = this.form.rules[this.prop];\n      const value = this.form.model[this.prop];\n\n      // 2.执行校验：使用官方也使用的async-validator\n      // 创建描述对象\n      const descriptor = { [this.prop]: rules };\n      // 创建校验器\n      const validator = new Schema(descriptor);\n      // 执行校验\n      return validator.validate({ [this.prop]: value }, errors => {\n        // 如果errors存在，则说明校验失败\n        if (errors) {\n          this.error = errors[0].message;\n        } else {\n          this.error = \"\";\n        }\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.error {\n  color: red;\n}\n</style>"]}]}